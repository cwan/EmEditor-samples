// Switch line comment

var _selection = document.selection;


// get the line characters form Config
var highlight = document.Config.Highlight;
var lineComment = highlight.LineComment1 || highlight.LineComment2;

if (!lineComment) {
	alert("No line commnet characters are specified!");
	Quit();
}


// get the selected range
var anchorPointY = _selection.GetAnchorPointY(eePosLogical);
var bottomPointY = _selection.GetBottomPointY(eePosLogical);

if (_selection.GetBottomPointX(eePosLogical) === 1) {
	bottomPointY--;
}


// check if the all lines are already commented out
var allCommentedOut = true;
var lineNo;

for (lineNo = anchorPointY; lineNo <= bottomPointY; lineNo++) {
	if (document.GetLine(lineNo).indexOf(lineComment) !== 0) {
		allCommentedOut = false;
		break;
	}
}


// select the range
_selection.StartOfDocument();
_selection.SetAnchorPoint(eePosLogical, 1, anchorPointY);
_selection.SetActivePoint(eePosLogical, document.GetLine(bottomPointY).length + 1, bottomPointY, true);

if (allCommentedOut) {
	// remove the line comment characters
	
	var headCommentPattern = "^";
	
	for (var i = 0; i < lineComment.length; i++) {
		headCommentPattern += '.';
	}
			
	_selection.Replace(
		headCommentPattern
		, ''
		, eeFindNext | eeFindSaveHistory | eeFindReplaceEscSeq | eeReplaceSelOnly | eeReplaceAll | eeFindReplaceRegExp);
	
} else {
	// add the line comment characters
	
	_selection.Replace(
		'^'
		, lineComment
		, eeFindNext | eeFindSaveHistory | eeFindReplaceEscSeq | eeReplaceSelOnly | eeReplaceAll | eeFindReplaceRegExp);
}

document.HighlightFind = false;
